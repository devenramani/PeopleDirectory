{"version":3,"sources":["webparts/peopleDirectory/components/PeopleDirectory/PeopleDirectory.tsx"],"names":[],"mappings":"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","file":"webparts/peopleDirectory/components/PeopleDirectory/PeopleDirectory.js","sourcesContent":["import * as React from 'react';\r\nimport { SPHttpClient, SPHttpClientResponse } from '@microsoft/sp-http';\r\nimport styles from './PeopleDirectory.module.scss';\r\nimport {\r\n  Spinner,\r\n  SpinnerSize\r\n} from 'office-ui-fabric-react/lib/Spinner';\r\nimport {\r\n  MessageBar,\r\n  MessageBarType\r\n} from 'office-ui-fabric-react/lib/MessageBar';\r\nimport { WebPartTitle } from \"@pnp/spfx-controls-react/lib/WebPartTitle\";\r\nimport {\r\n  IPeopleDirectoryProps,\r\n  IPeopleDirectoryState,\r\n  IPeopleSearchResults,\r\n  IPerson,\r\n  ICell\r\n} from './index';\r\nimport { IndexNavigation } from '../IndexNavigation';\r\nimport { PeopleList } from '../PeopleList';\r\nimport * as strings from 'PeopleDirectoryWebPartStrings';\r\n\r\nexport class PeopleDirectory extends React.Component<IPeopleDirectoryProps, IPeopleDirectoryState> {\r\n  constructor(props: IPeopleDirectoryProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      loading: false,\r\n      errorMessage: null,\r\n      selectedIndex: 'A',\r\n      searchQuery: '',\r\n      people: []\r\n    };\r\n  }\r\n\r\n  private _handleIndexSelect = (index: string): void => {\r\n    // switch the current tab to the tab selected in the navigation\r\n    // and reset the search query\r\n    this.setState({\r\n      selectedIndex: index,\r\n      searchQuery: ''\r\n    },\r\n    function() {\r\n      // load information about people matching the selected tab\r\n      this._loadPeopleInfo(index, null);\r\n    });\r\n\r\n  }\r\n\r\n  private _handleSearch = (searchQuery: string): void => {\r\n    // activate the Search tab in the navigation and set the\r\n    // specified text as the current search query\r\n    this.setState({\r\n      selectedIndex: 'Search',\r\n      searchQuery: searchQuery\r\n    },\r\n    function() {\r\n      // load information about people matching the specified search query\r\n      this._loadPeopleInfo(null, searchQuery);\r\n    });\r\n\r\n  }\r\n\r\n  private _handleSearchClear = (): void => {\r\n    // activate the A tab in the navigation and clear the previous search query\r\n    this.setState({\r\n      selectedIndex: 'A',\r\n      searchQuery: ''\r\n    },\r\n    function() {\r\n      // load information about people whose last name begins with A\r\n      this._loadPeopleInfo('A', null);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Loads information about people using SharePoint Search\r\n   * @param index Selected tab in the index navigation or 'Search', if the user is searching\r\n   * @param searchQuery Current search query or empty string if not searching\r\n   */\r\n  private _loadPeopleInfo(index: string, searchQuery: string): void {\r\n    // update the UI notifying the user that the component will now load its data\r\n    // clear any previously set error message and retrieved list of people\r\n    this.setState({\r\n      loading: true,\r\n      errorMessage: null,\r\n      people: []\r\n    });\r\n\r\n    const headers: HeadersInit = new Headers();\r\n    // suppress metadata to minimize the amount of data loaded from SharePoint\r\n    headers.append(\"accept\", \"application/json;odata.metadata=none\");\r\n\r\n    // if no search query has been specified, retrieve people whose last name begins with the\r\n    // specified letter. if a search query has been specified, escape any ' (single quotes)\r\n    // by replacing them with two '' (single quotes). Without this, the search query would fail\r\n    const query: string = searchQuery === null ? `LastName:${index}*` : searchQuery.replace(/'/g, `''`);\r\n\r\n    // retrieve information about people using SharePoint People Search\r\n    // sort results ascending by the last name\r\n    this.props.spHttpClient\r\n      .get(`${this.props.webUrl}/_api/search/query?querytext='${query}'&selectproperties='FirstName,LastName,PreferredName,WorkEmail,PictureURL,WorkPhone,MobilePhone,JobTitle,Department,Skills,PastProjects'&sortlist='LastName:ascending'&sourceid='b09a7990-05ea-4af9-81ef-edfab16c4e31'&rowlimit=500`, SPHttpClient.configurations.v1, {\r\n        headers: headers\r\n      })\r\n      .then((res: SPHttpClientResponse): Promise<IPeopleSearchResults> => {\r\n        return res.json();\r\n      })\r\n      .then((res: IPeopleSearchResults): void => {\r\n        if (res.error) {\r\n          // There was an error loading information about people.\r\n          // Notify the user that loading data is finished and return the\r\n          // error message that occurred\r\n          this.setState({\r\n            loading: false,\r\n            errorMessage: res.error.message\r\n          });\r\n          return;\r\n        }\r\n\r\n        if (res.PrimaryQueryResult.RelevantResults.TotalRows == 0) {\r\n          // No results were found. Notify the user that loading data is finished\r\n          this.setState({\r\n            loading: false\r\n          });\r\n          return;\r\n        }\r\n\r\n        // convert the SharePoint People Search results to an array of people\r\n        let people: IPerson[] = res.PrimaryQueryResult.RelevantResults.Table.Rows.map(r => {\r\n          return {\r\n            name: this._getValueFromSearchResult('PreferredName', r.Cells),\r\n            firstName: this._getValueFromSearchResult('FirstName', r.Cells),\r\n            lastName: this._getValueFromSearchResult('LastName', r.Cells),\r\n            phone: this._getValueFromSearchResult('WorkPhone', r.Cells),\r\n            mobile: this._getValueFromSearchResult('MobilePhone', r.Cells),\r\n            email: this._getValueFromSearchResult('WorkEmail', r.Cells),\r\n            photoUrl: this._getValueFromSearchResult('PictureURL', r.Cells),\r\n            function: this._getValueFromSearchResult('JobTitle', r.Cells),\r\n            department: this._getValueFromSearchResult('Department', r.Cells),\r\n            skills: this._getValueFromSearchResult('Skills', r.Cells),\r\n            projects: this._getValueFromSearchResult('PastProjects', r.Cells)\r\n          };\r\n        });\r\n\r\n        const selectedIndex = this.state.selectedIndex;\r\n\r\n        if (this.state.searchQuery === '') {\r\n          // An Index is used to search people.\r\n          //Reduce the people collection if the first letter of the lastName of the person is not equal to the selected index\r\n          people = people.reduce((result: IPerson[], person: IPerson) => {\r\n            if (person.lastName && person.lastName.indexOf(selectedIndex) === 0) {\r\n              result.push(person);\r\n            }\r\n            return result;\r\n          }, []);\r\n        }\r\n\r\n        if (people.length > 0) {\r\n          // notify the user that loading the data is finished and return the loaded information\r\n          this.setState({\r\n            loading: false,\r\n            people: people\r\n          });\r\n        }\r\n        else {\r\n          // People collection could be reduced to zero, so no results\r\n          this.setState({\r\n            loading: false\r\n          });\r\n          return;\r\n        }\r\n      }, (error: any): void => {\r\n        // An error has occurred while loading the data. Notify the user\r\n        // that loading data is finished and return the error message.\r\n        this.setState({\r\n          loading: false,\r\n          errorMessage: error\r\n        });\r\n      })\r\n      .catch((error: any): void => {\r\n        // An exception has occurred while loading the data. Notify the user\r\n        // that loading data is finished and return the exception.\r\n        this.setState({\r\n          loading: false,\r\n          errorMessage: error\r\n        });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Retrieves the value of the particular managed property for the current search result.\r\n   * If the property is not found, returns an empty string.\r\n   * @param key Name of the managed property to retrieve from the search result\r\n   * @param cells The array of cells for the current search result\r\n   */\r\n  private _getValueFromSearchResult(key: string, cells: ICell[]): string {\r\n    for (let i: number = 0; i < cells.length; i++) {\r\n      if (cells[i].Key === key) {\r\n        return cells[i].Value;\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    // load information about people after the component has been\r\n    // initiated on the page\r\n    this._loadPeopleInfo(this.state.selectedIndex, null);\r\n  }\r\n\r\n  public render(): React.ReactElement<IPeopleDirectoryProps> {\r\n    const { loading, errorMessage, selectedIndex, searchQuery, people } = this.state;\r\n\r\n    return (\r\n      <div className={styles.peopleDirectory}>\r\n        {!loading &&\r\n          errorMessage &&\r\n          // if the component is not loading data anymore and an error message\r\n          // has been returned, display the error message to the user\r\n          <MessageBar\r\n            messageBarType={MessageBarType.error}\r\n            isMultiline={false}>{strings.ErrorLabel}: {errorMessage}</MessageBar>\r\n        }\r\n        <WebPartTitle\r\n          displayMode={this.props.displayMode}\r\n          title={this.props.title}\r\n          updateProperty={this.props.onTitleUpdate} />\r\n        <IndexNavigation\r\n          selectedIndex={selectedIndex}\r\n          searchQuery={searchQuery}\r\n          onIndexSelect={this._handleIndexSelect}\r\n          onSearch={this._handleSearch}\r\n          onSearchClear={this._handleSearchClear}\r\n          locale={this.props.locale} />\r\n        {loading &&\r\n          // if the component is loading its data, show the spinner\r\n          <Spinner size={SpinnerSize.large} label={strings.LoadingSpinnerLabel} />\r\n        }\r\n        {!loading &&\r\n          !errorMessage &&\r\n          // if the component is not loading data anymore and no errors have occurred\r\n          // render the list of retrieved people\r\n          <PeopleList\r\n            selectedIndex={selectedIndex}\r\n            hasSearchQuery={searchQuery !== ''}\r\n            people={people} />\r\n\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\..\\src"}